version: '3.8'

services:
  # PostgreSQL 데이터베이스 (스테이징)
  db:
    image: postgres:15-alpine
    container_name: myzone_db_staging
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - myzone_network_staging
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Redis 캐시 (스테이징)
  redis:
    image: redis:7-alpine
    container_name: myzone_redis_staging
    volumes:
      - redis_data_staging:/data
    networks:
      - myzone_network_staging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.125'

  # FastAPI 백엔드 (스테이징)
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: myzone_backend_staging
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - DEBUG=false
      - ENVIRONMENT=staging
      - LOG_LEVEL=${LOG_LEVEL}
      - SMS_API_KEY=${SMS_API_KEY}
      - PAYMENT_API_KEY=${PAYMENT_API_KEY}
      - EMAIL_API_KEY=${EMAIL_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
    volumes:
      - backend_uploads_staging:/app/uploads
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - myzone_network_staging
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # React 프론트엔드 (스테이징)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: myzone_frontend_staging
    depends_on:
      - backend
    networks:
      - myzone_network_staging
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.125'

  # Nginx 리버스 프록시 (스테이징)
  nginx:
    image: nginx:alpine
    container_name: myzone_nginx_staging
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - myzone_network_staging
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.125'

volumes:
  postgres_data_staging:
  redis_data_staging:
  backend_uploads_staging:

networks:
  myzone_network_staging:
    driver: bridge