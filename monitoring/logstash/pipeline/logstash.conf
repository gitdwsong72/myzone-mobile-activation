# Logstash 파이프라인 설정
input {
  beats {
    port => 5044
  }
}

filter {
  # 타임스탬프 파싱
  if [fields][service] == "myzone" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:message}" }
      overwrite => [ "message" ]
    }
    
    date {
      match => [ "timestamp", "ISO8601" ]
    }
  }

  # Nginx 로그 파싱
  if [container][name] =~ /nginx/ {
    grok {
      match => { "message" => "%{NGINXACCESS}" }
    }
    
    mutate {
      convert => { "response" => "integer" }
      convert => { "bytes" => "integer" }
      convert => { "responsetime" => "float" }
    }
  }

  # FastAPI 로그 파싱
  if [container][name] =~ /backend/ {
    if [message] =~ /^\{/ {
      json {
        source => "message"
      }
    }
  }

  # 공통 필드 추가
  mutate {
    add_field => { "[@metadata][index]" => "myzone-logs-%{+YYYY.MM.dd}" }
  }

  # IP 지역 정보 추가 (GeoIP)
  if [clientip] {
    geoip {
      source => "clientip"
      target => "geoip"
    }
  }

  # 민감한 정보 마스킹
  mutate {
    gsub => [
      "message", "password=[^&\s]*", "password=***",
      "message", "token=[^&\s]*", "token=***",
      "message", "api_key=[^&\s]*", "api_key=***"
    ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[@metadata][index]}"
    template_name => "myzone"
    template_pattern => "myzone-*"
    template => {
      "index_patterns" => ["myzone-*"],
      "settings" => {
        "number_of_shards" => 1,
        "number_of_replicas" => 0
      },
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" },
          "level" => { "type" => "keyword" },
          "service" => { "type" => "keyword" },
          "environment" => { "type" => "keyword" },
          "message" => { "type" => "text" },
          "clientip" => { "type" => "ip" },
          "response" => { "type" => "integer" },
          "bytes" => { "type" => "integer" },
          "responsetime" => { "type" => "float" }
        }
      }
    }
  }

  # 디버깅용 (개발 환경에서만 사용)
  # stdout { codec => rubydebug }
}