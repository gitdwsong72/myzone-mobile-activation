name: Deploy to GitHub Pages

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'docs/**'
      - '.github/workflows/github-pages.yml'

permissions:
  contents: write
  pages: write
  id-token: write

env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Node.js with enhanced caching
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Cache node_modules
      uses: actions/cache@v3
      id: cache-node-modules
      with:
        path: frontend/node_modules
        key: ${{ env.CACHE_VERSION }}-node-modules-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ env.CACHE_VERSION }}-node-modules-${{ runner.os }}-
    
    - name: Install dependencies
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      run: |
        cd frontend
        npm ci --prefer-offline --no-audit
    
    - name: Verify dependencies
      run: |
        cd frontend
        npm ls --depth=0 || echo "Some peer dependencies missing, but build should work"
    
    - name: Build React App
      env:
        REACT_APP_API_URL: https://myzone-backend-production.up.railway.app/api/v1
        PUBLIC_URL: /myzone-mobile-activation/app
        GENERATE_SOURCEMAP: false
        REACT_APP_ENVIRONMENT: demo
        REACT_APP_DEMO_MODE: true
        CI: false
        DISABLE_ESLINT_PLUGIN: true
        TSC_COMPILE_ON_ERROR: true
        ESLINT_NO_DEV_ERRORS: true
        SKIP_PREFLIGHT_CHECK: true
        TYPESCRIPT_COMPILE_ON_ERROR: true
        NODE_OPTIONS: '--max-old-space-size=4096'
      run: |
        cd frontend
        echo "🚀 Starting React build..."
        npm run build:minimal
        echo "✅ Build completed successfully"
        echo "📦 Build size: $(du -sh build | cut -f1)"
    
    - name: Validate build output
      run: |
        cd frontend
        if [ ! -d "build" ]; then
          echo "❌ Build directory not found!"
          exit 1
        fi
        
        if [ ! -f "build/index.html" ]; then
          echo "❌ index.html not found in build!"
          exit 1
        fi
        
        if [ ! -f "build/404.html" ]; then
          echo "❌ 404.html not found in build!"
          exit 1
        fi
        
        echo "✅ Build validation passed"
        echo "📁 Build contents:"
        ls -la build/
    
    - name: Prepare deployment structure
      run: |
        echo "🔧 Preparing deployment structure..."
        
        # 기존 docs 백업 (랜딩 페이지 보존)
        if [ -f docs/index.html ]; then
          echo "📄 Backing up existing landing page..."
          cp docs/index.html docs/landing.html
        fi
        
        # React 앱을 docs/app에 배치
        echo "📱 Deploying React app to /app subdirectory..."
        mkdir -p docs/app
        cp -r frontend/build/* docs/app/
        
        # 랜딩 페이지 복원
        if [ -f docs/landing.html ]; then
          echo "🏠 Restoring landing page..."
          cp docs/landing.html docs/index.html
          rm docs/landing.html
        fi
        
        # SPA 라우팅을 위한 404.html을 루트에 배치
        echo "🔀 Setting up SPA routing..."
        cp frontend/build/404.html docs/404.html
        
        echo "✅ Deployment structure ready"
        echo "📁 Final structure:"
        find docs -type f -name "*.html" | head -10
    
    - name: Commit and push to docs
      run: |
        echo "📝 Committing deployment files..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # docs 폴더 변경사항 추가
        git add docs/
        
        # 변경사항이 있는지 확인
        if git diff --staged --quiet; then
          echo "📄 No changes to deploy"
        else
          git commit -m "🚀 Deploy: $(date '+%Y-%m-%d %H:%M:%S')"
          git push origin main
          echo "✅ Deployment committed and pushed"
        fi
    
    - name: Analyze bundle size and performance
      run: |
        cd frontend
        echo "📦 Analyzing bundle size and performance..."
        
        # 성능 분석 스크립트 실행
        npm run analyze:performance || echo "Performance analysis completed with warnings"
        
        # 기본 크기 분석 (백업용)
        BUILD_SIZE=$(du -sh build | cut -f1)
        JS_SIZE=$(du -sh build/static/js 2>/dev/null | cut -f1 || echo "0")
        CSS_SIZE=$(du -sh build/static/css 2>/dev/null | cut -f1 || echo "0")
        
        echo "📊 Quick Bundle Analysis:"
        echo "  - Total build size: $BUILD_SIZE"
        echo "  - JavaScript size: $JS_SIZE"
        echo "  - CSS size: $CSS_SIZE"
        
        # 성능 분석 결과 확인
        if [ -f "build/performance-analysis.json" ]; then
          echo "✅ Performance analysis report generated"
          
          # JSON에서 점수 추출 (jq가 있는 경우)
          if command -v jq >/dev/null 2>&1; then
            SCORE=$(jq -r '.score' build/performance-analysis.json)
            GRADE=$(jq -r '.grade' build/performance-analysis.json)
            echo "🏆 Performance Score: $SCORE/100 (Grade: $GRADE)"
          fi
        else
          echo "⚠️ Performance analysis report not found"
        fi
        
        # 큰 파일 식별
        echo "📋 Largest files:"
        find build -type f -name "*.js" -o -name "*.css" | xargs ls -lh | sort -k5 -hr | head -5

    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        sleep 30  # GitHub Pages 배포 대기
        
        # 기본 접근성 확인
        REPO_NAME="${{ github.repository }}"
        REPO_OWNER="${{ github.repository_owner }}"
        SITE_URL="https://${REPO_OWNER}.github.io/${REPO_NAME##*/}"
        
        echo "🌐 Site URL: $SITE_URL"
        echo "📱 React App URL: $SITE_URL/app"
        
        # HTTP 상태 확인
        if command -v curl >/dev/null 2>&1; then
          echo "📡 Checking site accessibility..."
          
          # 랜딩 페이지 확인
          LANDING_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL" || echo "000")
          if [ "$LANDING_STATUS" = "200" ]; then
            echo "✅ Landing page is accessible (HTTP $LANDING_STATUS)"
          else
            echo "⚠️ Landing page returned HTTP $LANDING_STATUS"
          fi
          
          # React 앱 확인
          APP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL/app" || echo "000")
          if [ "$APP_STATUS" = "200" ]; then
            echo "✅ React app is accessible (HTTP $APP_STATUS)"
          else
            echo "⚠️ React app returned HTTP $APP_STATUS"
          fi
          
          # 성능 측정
          echo "⏱️ Performance check:"
          RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" "$SITE_URL" || echo "0")
          echo "  - Landing page response time: ${RESPONSE_TIME}s"
          
          APP_RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" "$SITE_URL/app" || echo "0")
          echo "  - React app response time: ${APP_RESPONSE_TIME}s"
        fi
        
        echo "🎉 Deployment completed successfully!"
        echo "📋 Summary:"
        echo "  - Landing Page: $SITE_URL (HTTP $LANDING_STATUS)"
        echo "  - React App: $SITE_URL/app (HTTP $APP_STATUS)"
        echo "  - SPA Routing: Enabled with 404.html"

    - name: Create deployment report
      run: |
        echo "📝 Creating deployment report..."
        
        REPO_NAME="${{ github.repository }}"
        REPO_OWNER="${{ github.repository_owner }}"
        SITE_URL="https://${REPO_OWNER}.github.io/${REPO_NAME##*/}"
        TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
        COMMIT_SHA="${{ github.sha }}"
        
        # 빌드 정보 수집
        cd frontend
        BUILD_SIZE=$(du -sh build | cut -f1)
        JS_COUNT=$(find build/static/js -name "*.js" 2>/dev/null | wc -l || echo "0")
        CSS_COUNT=$(find build/static/css -name "*.css" 2>/dev/null | wc -l || echo "0")
        
        # 리포트 생성
        cat > ../docs/deployment-status.html << EOF
        <!DOCTYPE html>
        <html lang="ko">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>배포 상태 - MyZone</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 40px; }
                .status { padding: 20px; border-radius: 8px; margin: 20px 0; }
                .success { background: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
                .info { background: #d1ecf1; border: 1px solid #bee5eb; color: #0c5460; }
                .metric { display: inline-block; margin: 10px 20px 10px 0; }
                .metric strong { display: block; font-size: 1.2em; }
            </style>
        </head>
        <body>
            <h1>🚀 MyZone 배포 상태</h1>
            
            <div class="status success">
                <h2>✅ 배포 성공</h2>
                <p><strong>배포 시간:</strong> $TIMESTAMP</p>
                <p><strong>커밋:</strong> $COMMIT_SHA</p>
                <p><strong>워크플로우:</strong> ${{ github.workflow }}</p>
            </div>
            
            <div class="status info">
                <h2>📊 빌드 정보</h2>
                <div class="metric">
                    <strong>$BUILD_SIZE</strong>
                    <span>총 빌드 크기</span>
                </div>
                <div class="metric">
                    <strong>$JS_COUNT</strong>
                    <span>JavaScript 파일</span>
                </div>
                <div class="metric">
                    <strong>$CSS_COUNT</strong>
                    <span>CSS 파일</span>
                </div>
            </div>
            
            <div class="status info">
                <h2>🔗 접속 링크</h2>
                <p><a href="$SITE_URL" target="_blank">🏠 랜딩 페이지</a></p>
                <p><a href="$SITE_URL/app" target="_blank">📱 React 앱</a></p>
            </div>
            
            <div class="status info">
                <h2>📈 성능 모니터링</h2>
                <p>배포된 앱에서 성능 데이터를 확인하려면 브라우저 개발자 도구의 콘솔을 확인하세요.</p>
                <p>번들 분석을 위해 <code>npm run analyze</code> 명령을 사용할 수 있습니다.</p>
            </div>
        </body>
        </html>
        EOF
        
        echo "✅ Deployment report created at docs/deployment-status.html"
    
    - name: Create failure report
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        
        TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
        COMMIT_SHA="${{ github.sha }}"
        
        # 실패 리포트 생성
        mkdir -p docs
        cat > docs/deployment-status.html << EOF
        <!DOCTYPE html>
        <html lang="ko">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>배포 실패 - MyZone</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 40px; }
                .status { padding: 20px; border-radius: 8px; margin: 20px 0; }
                .error { background: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }
                .info { background: #d1ecf1; border: 1px solid #bee5eb; color: #0c5460; }
            </style>
        </head>
        <body>
            <h1>❌ MyZone 배포 실패</h1>
            
            <div class="status error">
                <h2>배포 실패</h2>
                <p><strong>실패 시간:</strong> $TIMESTAMP</p>
                <p><strong>커밋:</strong> $COMMIT_SHA</p>
                <p><strong>워크플로우:</strong> ${{ github.workflow }}</p>
            </div>
            
            <div class="status info">
                <h2>🔍 문제 해결 가이드</h2>
                <ul>
                    <li>GitHub Actions 로그에서 상세한 오류 메시지 확인</li>
                    <li>React 앱 빌드 오류 확인</li>
                    <li>환경 변수 설정 확인</li>
                    <li>GitHub Pages 설정 확인</li>
                    <li>의존성 버전 충돌 확인</li>
                </ul>
            </div>
            
            <div class="status info">
                <h2>📞 지원</h2>
                <p>문제가 지속되면 GitHub Issues에서 도움을 요청하세요.</p>
            </div>
        </body>
        </html>
        EOF
        
        echo "📝 Failure report created"
        echo "🔍 Check the logs above for details"
        echo "💡 Common issues:"
        echo "  - Build errors in React app"
        echo "  - Missing environment variables"  
        echo "  - GitHub Pages configuration issues"
        echo "  - Node.js memory issues"
        echo "  - Dependency conflicts"

    - name: Notify on failure
      if: failure()
      run: |
        echo "🚨 Deployment monitoring alert:"
        echo "  - Status: FAILED"
        echo "  - Time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
        echo "  - Commit: ${{ github.sha }}"
        echo "  - Branch: ${{ github.ref_name }}"
        echo "  - Actor: ${{ github.actor }}"